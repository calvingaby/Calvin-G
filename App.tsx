
import React, { useState, useCallback } from 'react';
import { ChatMessage } from './types';
import ChatPanel from './components/ChatPanel';
import PreviewPanel from './components/PreviewPanel';
import Header from './components/Header';
import { generateWebsite, refineWebsite } from './services/geminiService';

// To make TypeScript happy with JSZip from CDN
declare const JSZip: any;

const App: React.FC = () => {
  const [chatHistory, setChatHistory] = useState<ChatMessage[]>([
    {
      role: 'model',
      content: "Hello! I'm your AI Website Builder. Describe the website you want to create, or upload a sketch. For example, 'Create a modern portfolio for a photographer.'",
    },
  ]);
  const [generatedHtml, setGeneratedHtml] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const handleSendMessage = useCallback(async (prompt: string, image: string | null) => {
    setError(null);
    setIsLoading(true);

    const userMessage: ChatMessage = { role: 'user', content: prompt, image };
    setChatHistory(prev => [...prev, userMessage]);

    try {
      let responseHtml: string;
      if (generatedHtml && !image) {
        // Refine existing website
        responseHtml = await refineWebsite(prompt, generatedHtml);
      } else {
        // Generate new website from scratch
        responseHtml = await generateWebsite(prompt, image);
      }
      
      setGeneratedHtml(responseHtml);
      setChatHistory(prev => [...prev, { role: 'model', content: "Here is the updated website preview. What would you like to change next?" }]);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred.';
      setError(errorMessage);
      setChatHistory(prev => [...prev, { role: 'model', content: `Sorry, I ran into an error: ${errorMessage}` }]);
    } finally {
      setIsLoading(false);
    }
  }, [generatedHtml]);

  const handleExportHtml = () => {
    if (!generatedHtml) return;
    const blob = new Blob([generatedHtml], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'index.html';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };
  
  const handleExportWordPress = async () => {
    if (!generatedHtml) return;

    const zip = new JSZip();

    // style.css
    const styleCss = `
/*
Theme Name: AI Generated Theme
Author: AI Website Builder
Description: A theme generated by the AI Website Builder.
Version: 1.0
*/
    `;
    zip.file("style.css", styleCss);

    // index.php
    const indexPhp = `
<?php
/**
 * The main template file
 */
?>
<!DOCTYPE html>
<html <?php language_attributes(); ?>>
<head>
    <meta charset="<?php bloginfo( 'charset' ); ?>">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.tailwindcss.com"></script>
    <?php wp_head(); ?>
</head>
<body <?php body_class('bg-white'); ?>>
    ${generatedHtml}
    <?php wp_footer(); ?>
</body>
</html>
    `;
    zip.file("index.php", indexPhp);
    
    // functions.php (optional, but good practice)
    zip.file("functions.php", "<?php // Theme functions go here ?>");
    
    const content = await zip.generateAsync({ type: "blob" });
    const url = URL.createObjectURL(content);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'ai-generated-theme.zip';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="flex flex-col h-screen font-sans bg-gray-900 text-gray-100">
      <Header />
      <div className="flex flex-1 overflow-hidden">
        <ChatPanel
          chatHistory={chatHistory}
          isLoading={isLoading}
          error={error}
          onSendMessage={handleSendMessage}
          onExportHtml={handleExportHtml}
          onExportWordPress={handleExportWordPress}
        />
        <PreviewPanel htmlContent={generatedHtml} />
      </div>
    </div>
  );
};

export default App;
